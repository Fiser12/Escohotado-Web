datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
  engine = "node"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  roles             String[]
  stripeRoles       String[]
  locales           String[]

  customerId         String?
  customer           StripeCustomer?
  subscriptionId     String?
  subscriptionStatus StripeSubscriptionStatus?
  priceId            String?
}

model StripeCustomer {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])
  currency      String
  delinquent    Boolean
  name          String
  description   String?
  email         String
  phone         String
  invoicePrefix String
  taxExempt     String
  created       Int
  balance       Int

  checkouts     StripeCheckoutSession[]
}


model StripeCheckoutSession {
  id           String @id @default(cuid())
  customerId   String
  user         StripeCustomer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  unitAmount   Int
  quantity     Int
  currency     String
  lookupKey    String
  invoiceId    String
  mode         String
  subscription String

  lineItems StripeLineItem[]
}

model StripeLineItem {
  id                    String @id
  ammountDiscount       Int
  ammountSubtotal       Int
  ammountTotal          Int
  ammountTax            Int
  currency              String
  description           String
  price_active          Boolean
  price_billingScheme   String
  price_created         Int
  price_id              String
  price_liveMode        Boolean
  price_lookupKey       String

  checkoutSessionId     String
  checkoutSession       StripeCheckoutSession @relation(fields: [checkoutSessionId], references: [id])
  productId             String
  product               StripeProduct @relation(fields: [productId], references: [id])
}

model StripeProduct {
  id                 String  @id @default(cuid())
  active             Boolean
  name               String
  description        String
  tax_code           String
  type               String
  created            Int
  updated            Int
  url                String?
  checkoutSessions   StripeLineItem[]
}

enum StripeSubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
