datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl-openssl-3.0.x"]
  engine = "node"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  roles             String[]
  stripeRoles       String[]
  locales           String[]

  customerId         String?
  customer           StripeCustomer?
}

model StripeCustomer {
  id            String  @id @default(cuid())
  userId        String  @unique
  user          User    @relation(fields: [userId], references: [id])
  currency      String?
  delinquent    Boolean?
  name          String?
  description   String?
  email         String?
  phone         String?  
  invoicePrefix String?
  taxExempt     String?
  created       Int
  balance       Int

  checkouts     StripeCheckoutSession[]
  subscriptionId String?
  subscription  StripeSubscription?
}

model StripeSubscription {
  id                    String  @id @default(cuid())

  startDate             Int
  endedAt               Int?
  currentPeriodEnd      Int
  currentPeriodStart    Int
  canceledAt            Int?
  invoiceId             String?
  description           String?
  trialStart            Int?
  trialEnd              Int?
  currency              String
  status                StripeSubscriptionStatus
  discounts             Json?
  discount              Json?
  subscriptionItems     StripeSubscriptionItem[]
  customerId            String  @unique
  customer              StripeCustomer @relation(fields: [customerId], references: [id])
}

model StripeSubscriptionItem {
  id                    String  @id @default(cuid())
  quantity              Int?
  created               Int
  discounts             Json?

  subscriptionId        String
  subscription          StripeSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  priceId               String
  price                 StripePrice @relation(fields: [priceId], references: [id])
}

model StripeCheckoutSession {
  id                        String   @id

  customerId                String?
  customer                  StripeCustomer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  unitAmount                Int?
  totalAmount               Int?
  currency                  String?
  allowPromotionCodes       Boolean?
  clientReferenceId         String?
  clientSecret              String?
  consent                   String?
  consentCollection         String?
  created                   Int
  expiresAt                 Int?
  invoiceId                 String?
  invoiceCreation           String?
  locale                    String?
  mode                      String
  paymentIntentId           String?
  paymentStatus             String
  recoveredFrom             String?
  subscriptionId            String?
  successUrl                String?
  cancelUrl                 String?
  status                    String?
  url                       String?
  livemode                  Boolean
  shippingAddressCollection String?
  shippingDetails           String?

  lineItems                 StripeLineItem[]
}

model StripeProduct {
  id                   String          @id @default(cuid())
  
  active               Boolean
  name                 String
  description          String?
  taxCode              String?
  type                 StripeProductType
  created              Int
  updated              Int
  unitLabel            String?
  url                  String?
  images               String[]
  livemode             Boolean
  marketingFeatures    Json?
  packageDimensions    Json?
  shippable            Boolean?
  statementDescriptor  String?

  prices               StripePrice[]
}

enum StripeProductType {
  service
  good
}

model StripeLineItem {
  id                    String @id
  ammountDiscount       Int
  ammountSubtotal       Int
  ammountTotal          Int
  ammountTax            Int
  currency              String
  description           String

  priceId               String
  price                 StripePrice @relation(fields: [priceId], references: [id])
  checkoutSessionId     String
  checkoutSession       StripeCheckoutSession @relation(fields: [checkoutSessionId], references: [id], onDelete: Cascade)

  taxes                 Json?
  discounts             Json?
}

model StripePrice {
    id                    String @id
    lookupKey             String?
    active                Boolean
    billingScheme         String
    created               Int
    liveMode              Boolean
    lineItems             StripeLineItem[]
    subscriptionItem      StripeSubscriptionItem[]

    productId             String
    product               StripeProduct @relation(fields: [productId], references: [id])  

}

enum StripeSubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
