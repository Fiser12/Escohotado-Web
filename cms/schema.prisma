// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model CMSAdminUser {
  id        String    @id @default(cuid())
  name      String    @default("")
  email     String    @unique @default("")
  password  String
  createdAt DateTime? @default(now())
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  roles         Json?
  stripeRoles   Json?
  locales       Json?
  accounts      Account[]       @relation("Account_user")
  sessions      Session[]       @relation("Session_user")
  customer      StripeCustomer? @relation("StripeCustomer_user")
}

model Session {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("Session_user", fields: [userId], references: [id], onDelete: Cascade)

  sessionToken String   @unique @default("")
  expires      DateTime

  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  user              User?   @relation("Account_user", fields: [userId], references: [id])
  userId            String? @map("user")
  type              String  @default("")
  provider          String  @default("")
  providerAccountId String  @default("")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  id_token          String?
  token_type        String?
  scope             String?
  session_state     String?

  @@index([userId])
}

model VerificationToken {
  id         String    @id @default(cuid())
  identifier String    @default("")
  token      String    @unique @default("")
  expires    DateTime?
}

model StripeCustomer {
  id             String                  @id @default(cuid())
  user           User?                   @relation("StripeCustomer_user", fields: [userId], references: [id])
  userId         String?                 @unique @map("user")
  currency       String                  @default("eur")
  delinquent     Boolean                 @default(false)
  name           String?
  description    String?
  email          String?
  phone          String?
  invoicePrefix  String?
  taxExempt      String?
  created        Int
  balance        Int
  subscription   StripeSubscription?     @relation("StripeCustomer_subscription", fields: [subscriptionId], references: [id])
  subscriptionId String?                 @unique @map("subscription")
  checkouts      StripeCheckoutSession[] @relation("StripeCheckoutSession_customer")
}

model StripeSubscription {
  id                 String                        @id @default(cuid())
  customer           StripeCustomer?               @relation("StripeCustomer_subscription")
  startDate          Int
  endedAt            Int?
  currentPeriodEnd   Int
  currentPeriodStart Int
  canceledAt         Int?
  cancelAtPeriodEnd  Boolean                       @default(false)
  invoiceId          String?
  description        String?
  trialStart         Int?
  trialEnd           Int?
  currency           String                        @default("eur")
  status             StripeSubscriptionStatusType?
  discounts          Json?
  discount           Json?
  subscriptionItems  StripeSubscriptionItem[]      @relation("StripeSubscriptionItem_subscription")
}

model StripeSubscriptionItem {
  id             String             @id @default(cuid())
  quantity       Int?
  created        Int
  discounts      Json?
  subscription   StripeSubscription @relation("StripeSubscriptionItem_subscription", fields: [subscriptionId], references: [id])
  subscriptionId String             @map("subscription")

  price   StripePrice? @relation("StripeSubscriptionItem_price", fields: [priceId], references: [id])
  priceId String?      @map("price")

  @@index([subscriptionId])
  @@index([priceId])
}

model StripePrice {
  id                String                   @id @default(cuid())
  lookupKey         String?
  active            Boolean                  @default(false)
  billingScheme     String                   @default("")
  created           Int
  livemode          Boolean                  @default(false)
  subscriptionItem  StripeSubscriptionItem[] @relation("StripeSubscriptionItem_price")
  product           StripeProduct?           @relation("StripePrice_product", fields: [productId], references: [id])
  productId         String?                  @map("product")
  lineItems         StripeLineItem[]         @relation("StripeLineItem_price")
  currency          String                   @default("eur")
  unitAmount        Int?
  unitAmountDecimal String?
  recurring         Json?
  metadata          Json?
  nickname          String?
  type              String                   @default("")
  currencyOptions   Json?
  taxBehavior       String?
  tiers             Json?
  tiersMode         Json?
  transformQuantity Json?

  @@index([productId])
}

model StripeProduct {
  id                  String        @id @default(cuid())
  active              Boolean       @default(false)
  name                String        @default("")
  description         String?
  taxCode             String?
  type                String?
  created             Int
  updated             Int
  unitLabel           String?
  url                 String?
  images              Json?
  livemode            Boolean       @default(false)
  marketingFeatures   Json?
  metadata            Json?
  packageDimensions   Json?
  shippable           Boolean       @default(false)
  statementDescriptor String?
  prices              StripePrice[] @relation("StripePrice_product")
}

model StripeCheckoutSession {
  id                        String           @id @default(cuid())
  customer                  StripeCustomer?  @relation("StripeCheckoutSession_customer", fields: [customerId], references: [id])
  customerId                String?          @map("customer")
  unitAmount                Int?
  totalAmount               Int?
  currency                  String           @default("eur")
  allowPromotionCodes       Boolean          @default(false)
  clientReferenceId         String?
  clientSecret              String?
  consent                   String?
  consentCollection         String?
  created                   Int
  expiresAt                 Int?
  invoiceId                 String?
  invoiceCreation           String?
  locale                    String?
  mode                      String           @default("")
  paymentIntentId           String?
  paymentStatus             String           @default("")
  recoveredFrom             String?
  subscriptionId            String?
  successUrl                String?
  cancelUrl                 String?
  status                    String?
  url                       String?
  shippingAddressCollection String?
  shippingDetails           String?
  livemode                  Boolean          @default(false)
  lineItems                 StripeLineItem[] @relation("StripeLineItem_checkoutSession")

  @@index([customerId])
}

model StripeLineItem {
  id                String                 @id @default(cuid())
  ammountDiscount   Int?
  ammountSubtotal   Int?
  ammountTotal      Int?
  ammountTax        Int?
  currency          String                 @default("eur")
  description       String                 @default("")
  taxes             Json?
  discounts         Json?
  price             StripePrice?           @relation("StripeLineItem_price", fields: [priceId], references: [id])
  priceId           String?                @map("price")
  checkoutSession   StripeCheckoutSession? @relation("StripeLineItem_checkoutSession", fields: [checkoutSessionId], references: [id])
  checkoutSessionId String?                @map("checkoutSession")

  @@index([priceId])
  @@index([checkoutSessionId])
}

enum StripeSubscriptionStatusType {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}
