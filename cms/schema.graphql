# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type CMSAdminUser {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input CMSAdminUserWhereUniqueInput {
  id: ID
  email: String
}

input CMSAdminUserWhereInput {
  AND: [CMSAdminUserWhereInput!]
  OR: [CMSAdminUserWhereInput!]
  NOT: [CMSAdminUserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CMSAdminUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input CMSAdminUserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input CMSAdminUserUpdateArgs {
  where: CMSAdminUserWhereUniqueInput!
  data: CMSAdminUserUpdateInput!
}

input CMSAdminUserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type User {
  id: ID!
  name: String
  email: String
  emailVerified: DateTime
  image: String
  roles: JSON
  stripeRoles: JSON
  locales: JSON
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  customer: StripeCustomer
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringNullableFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  image: StringNullableFilter
  accounts: AccountManyRelationFilter
  sessions: SessionManyRelationFilter
  customer: StripeCustomerWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: StringNullableFilter
}

input AccountManyRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

input SessionManyRelationFilter {
  every: SessionWhereInput
  some: SessionWhereInput
  none: SessionWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  emailVerified: OrderDirection
  image: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  emailVerified: DateTime
  image: String
  roles: JSON
  stripeRoles: JSON
  locales: JSON
  accounts: AccountRelateToManyForUpdateInput
  sessions: SessionRelateToManyForUpdateInput
  customer: StripeCustomerRelateToOneForUpdateInput
}

input AccountRelateToManyForUpdateInput {
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input SessionRelateToManyForUpdateInput {
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input StripeCustomerRelateToOneForUpdateInput {
  create: StripeCustomerCreateInput
  connect: StripeCustomerWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  emailVerified: DateTime
  image: String
  roles: JSON
  stripeRoles: JSON
  locales: JSON
  accounts: AccountRelateToManyForCreateInput
  sessions: SessionRelateToManyForCreateInput
  customer: StripeCustomerRelateToOneForCreateInput
}

input AccountRelateToManyForCreateInput {
  create: [AccountCreateInput!]
  connect: [AccountWhereUniqueInput!]
}

input SessionRelateToManyForCreateInput {
  create: [SessionCreateInput!]
  connect: [SessionWhereUniqueInput!]
}

input StripeCustomerRelateToOneForCreateInput {
  create: StripeCustomerCreateInput
  connect: StripeCustomerWhereUniqueInput
}

type Session {
  id: ID!
  user: User
  sessionToken: String
  expires: DateTime
}

input SessionWhereUniqueInput {
  id: ID
  sessionToken: String
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IDFilter
  user: UserWhereInput
  sessionToken: StringFilter
  expires: DateTimeFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input SessionOrderByInput {
  id: OrderDirection
  sessionToken: OrderDirection
  expires: OrderDirection
}

input SessionUpdateInput {
  user: UserRelateToOneForUpdateInput
  sessionToken: String
  expires: DateTime
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SessionUpdateArgs {
  where: SessionWhereUniqueInput!
  data: SessionUpdateInput!
}

input SessionCreateInput {
  user: UserRelateToOneForCreateInput
  sessionToken: String
  expires: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Account {
  id: ID!
  user: User
  type: String
  provider: String
  providerAccountId: String
  refresh_token: String
  access_token: String
  expires_at: Int
  id_token: String
  token_type: String
  scope: String
  session_state: String
}

input AccountWhereUniqueInput {
  id: ID
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IDFilter
  user: UserWhereInput
  type: StringFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  token_type: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AccountOrderByInput {
  id: OrderDirection
  type: OrderDirection
  provider: OrderDirection
  providerAccountId: OrderDirection
  refresh_token: OrderDirection
  access_token: OrderDirection
  expires_at: OrderDirection
  id_token: OrderDirection
  token_type: OrderDirection
  scope: OrderDirection
  session_state: OrderDirection
}

input AccountUpdateInput {
  user: UserRelateToOneForUpdateInput
  type: String
  provider: String
  providerAccountId: String
  refresh_token: String
  access_token: String
  expires_at: Int
  id_token: String
  token_type: String
  scope: String
  session_state: String
}

input AccountUpdateArgs {
  where: AccountWhereUniqueInput!
  data: AccountUpdateInput!
}

input AccountCreateInput {
  user: UserRelateToOneForCreateInput
  type: String
  provider: String
  providerAccountId: String
  refresh_token: String
  access_token: String
  expires_at: Int
  id_token: String
  token_type: String
  scope: String
  session_state: String
}

type VerificationToken {
  id: ID!
  identifier: String
  token: String
  expires: DateTime
}

input VerificationTokenWhereUniqueInput {
  id: ID
  token: String
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  id: IDFilter
  identifier: StringFilter
  token: StringFilter
  expires: DateTimeNullableFilter
}

input VerificationTokenOrderByInput {
  id: OrderDirection
  identifier: OrderDirection
  token: OrderDirection
  expires: OrderDirection
}

input VerificationTokenUpdateInput {
  identifier: String
  token: String
  expires: DateTime
}

input VerificationTokenUpdateArgs {
  where: VerificationTokenWhereUniqueInput!
  data: VerificationTokenUpdateInput!
}

input VerificationTokenCreateInput {
  identifier: String
  token: String
  expires: DateTime
}

type StripeCustomer {
  id: ID!
  user: User
  currency: String
  delinquent: Boolean
  name: String
  description: String
  email: String
  phone: String
  invoicePrefix: String
  taxExempt: String
  created: Int
  balance: Int
  subscription: StripeSubscription
  checkouts(where: StripeCheckoutSessionWhereInput! = {}, orderBy: [StripeCheckoutSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeCheckoutSessionWhereUniqueInput): [StripeCheckoutSession!]
  checkoutsCount(where: StripeCheckoutSessionWhereInput! = {}): Int
}

input StripeCustomerWhereUniqueInput {
  id: ID
}

input StripeCustomerWhereInput {
  AND: [StripeCustomerWhereInput!]
  OR: [StripeCustomerWhereInput!]
  NOT: [StripeCustomerWhereInput!]
  id: IDFilter
  user: UserWhereInput
  currency: StringFilter
  delinquent: BooleanFilter
  name: StringNullableFilter
  description: StringNullableFilter
  email: StringNullableFilter
  phone: StringNullableFilter
  invoicePrefix: StringNullableFilter
  taxExempt: StringNullableFilter
  created: IntFilter
  balance: IntFilter
  subscription: StripeSubscriptionWhereInput
  checkouts: StripeCheckoutSessionManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input StripeCheckoutSessionManyRelationFilter {
  every: StripeCheckoutSessionWhereInput
  some: StripeCheckoutSessionWhereInput
  none: StripeCheckoutSessionWhereInput
}

input StripeCustomerOrderByInput {
  id: OrderDirection
  currency: OrderDirection
  delinquent: OrderDirection
  name: OrderDirection
  description: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  invoicePrefix: OrderDirection
  taxExempt: OrderDirection
  created: OrderDirection
  balance: OrderDirection
}

input StripeCustomerUpdateInput {
  user: UserRelateToOneForUpdateInput
  currency: String
  delinquent: Boolean
  name: String
  description: String
  email: String
  phone: String
  invoicePrefix: String
  taxExempt: String
  created: Int
  balance: Int
  subscription: StripeSubscriptionRelateToOneForUpdateInput
  checkouts: StripeCheckoutSessionRelateToManyForUpdateInput
}

input StripeSubscriptionRelateToOneForUpdateInput {
  create: StripeSubscriptionCreateInput
  connect: StripeSubscriptionWhereUniqueInput
  disconnect: Boolean
}

input StripeCheckoutSessionRelateToManyForUpdateInput {
  disconnect: [StripeCheckoutSessionWhereUniqueInput!]
  set: [StripeCheckoutSessionWhereUniqueInput!]
  create: [StripeCheckoutSessionCreateInput!]
  connect: [StripeCheckoutSessionWhereUniqueInput!]
}

input StripeCustomerUpdateArgs {
  where: StripeCustomerWhereUniqueInput!
  data: StripeCustomerUpdateInput!
}

input StripeCustomerCreateInput {
  user: UserRelateToOneForCreateInput
  currency: String
  delinquent: Boolean
  name: String
  description: String
  email: String
  phone: String
  invoicePrefix: String
  taxExempt: String
  created: Int
  balance: Int
  subscription: StripeSubscriptionRelateToOneForCreateInput
  checkouts: StripeCheckoutSessionRelateToManyForCreateInput
}

input StripeSubscriptionRelateToOneForCreateInput {
  create: StripeSubscriptionCreateInput
  connect: StripeSubscriptionWhereUniqueInput
}

input StripeCheckoutSessionRelateToManyForCreateInput {
  create: [StripeCheckoutSessionCreateInput!]
  connect: [StripeCheckoutSessionWhereUniqueInput!]
}

type StripeSubscription {
  id: ID!
  customer: StripeCustomer
  startDate: Int
  endedAt: Int
  currentPeriodEnd: Int
  currentPeriodStart: Int
  canceledAt: Int
  cancelAtPeriodEnd: Boolean
  invoiceId: String
  description: String
  trialStart: Int
  trialEnd: Int
  currency: String
  status: StripeSubscriptionStatusType
  discounts: JSON
  discount: JSON
  subscriptionItems(where: StripeSubscriptionItemWhereInput! = {}, orderBy: [StripeSubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeSubscriptionItemWhereUniqueInput): [StripeSubscriptionItem!]
  subscriptionItemsCount(where: StripeSubscriptionItemWhereInput! = {}): Int
}

enum StripeSubscriptionStatusType {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

input StripeSubscriptionWhereUniqueInput {
  id: ID
}

input StripeSubscriptionWhereInput {
  AND: [StripeSubscriptionWhereInput!]
  OR: [StripeSubscriptionWhereInput!]
  NOT: [StripeSubscriptionWhereInput!]
  id: IDFilter
  customer: StripeCustomerWhereInput
  startDate: IntFilter
  endedAt: IntNullableFilter
  currentPeriodEnd: IntFilter
  currentPeriodStart: IntFilter
  canceledAt: IntNullableFilter
  cancelAtPeriodEnd: BooleanFilter
  invoiceId: StringNullableFilter
  description: StringNullableFilter
  trialStart: IntNullableFilter
  trialEnd: IntNullableFilter
  currency: StringFilter
  status: StripeSubscriptionStatusTypeNullableFilter
  subscriptionItems: StripeSubscriptionItemManyRelationFilter
}

input StripeSubscriptionStatusTypeNullableFilter {
  equals: StripeSubscriptionStatusType
  in: [StripeSubscriptionStatusType!]
  notIn: [StripeSubscriptionStatusType!]
  not: StripeSubscriptionStatusTypeNullableFilter
}

input StripeSubscriptionItemManyRelationFilter {
  every: StripeSubscriptionItemWhereInput
  some: StripeSubscriptionItemWhereInput
  none: StripeSubscriptionItemWhereInput
}

input StripeSubscriptionOrderByInput {
  id: OrderDirection
  startDate: OrderDirection
  endedAt: OrderDirection
  currentPeriodEnd: OrderDirection
  currentPeriodStart: OrderDirection
  canceledAt: OrderDirection
  cancelAtPeriodEnd: OrderDirection
  invoiceId: OrderDirection
  description: OrderDirection
  trialStart: OrderDirection
  trialEnd: OrderDirection
  currency: OrderDirection
  status: OrderDirection
}

input StripeSubscriptionUpdateInput {
  customer: StripeCustomerRelateToOneForUpdateInput
  startDate: Int
  endedAt: Int
  currentPeriodEnd: Int
  currentPeriodStart: Int
  canceledAt: Int
  cancelAtPeriodEnd: Boolean
  invoiceId: String
  description: String
  trialStart: Int
  trialEnd: Int
  currency: String
  status: StripeSubscriptionStatusType
  discounts: JSON
  discount: JSON
  subscriptionItems: StripeSubscriptionItemRelateToManyForUpdateInput
}

input StripeSubscriptionItemRelateToManyForUpdateInput {
  disconnect: [StripeSubscriptionItemWhereUniqueInput!]
  set: [StripeSubscriptionItemWhereUniqueInput!]
  create: [StripeSubscriptionItemCreateInput!]
  connect: [StripeSubscriptionItemWhereUniqueInput!]
}

input StripeSubscriptionUpdateArgs {
  where: StripeSubscriptionWhereUniqueInput!
  data: StripeSubscriptionUpdateInput!
}

input StripeSubscriptionCreateInput {
  customer: StripeCustomerRelateToOneForCreateInput
  startDate: Int
  endedAt: Int
  currentPeriodEnd: Int
  currentPeriodStart: Int
  canceledAt: Int
  cancelAtPeriodEnd: Boolean
  invoiceId: String
  description: String
  trialStart: Int
  trialEnd: Int
  currency: String
  status: StripeSubscriptionStatusType
  discounts: JSON
  discount: JSON
  subscriptionItems: StripeSubscriptionItemRelateToManyForCreateInput
}

input StripeSubscriptionItemRelateToManyForCreateInput {
  create: [StripeSubscriptionItemCreateInput!]
  connect: [StripeSubscriptionItemWhereUniqueInput!]
}

type StripeSubscriptionItem {
  id: ID!
  quantity: Int
  created: Int
  discounts: JSON
  subscription: StripeSubscription
  price: StripePrice
}

input StripeSubscriptionItemWhereUniqueInput {
  id: ID
}

input StripeSubscriptionItemWhereInput {
  AND: [StripeSubscriptionItemWhereInput!]
  OR: [StripeSubscriptionItemWhereInput!]
  NOT: [StripeSubscriptionItemWhereInput!]
  id: IDFilter
  quantity: IntNullableFilter
  created: IntFilter
  subscription: StripeSubscriptionWhereInput
  price: StripePriceWhereInput
}

input StripeSubscriptionItemOrderByInput {
  id: OrderDirection
  quantity: OrderDirection
  created: OrderDirection
}

input StripeSubscriptionItemUpdateInput {
  quantity: Int
  created: Int
  discounts: JSON
  subscription: StripeSubscriptionRelateToOneForUpdateInput
  price: StripePriceRelateToOneForUpdateInput
}

input StripePriceRelateToOneForUpdateInput {
  create: StripePriceCreateInput
  connect: StripePriceWhereUniqueInput
  disconnect: Boolean
}

input StripeSubscriptionItemUpdateArgs {
  where: StripeSubscriptionItemWhereUniqueInput!
  data: StripeSubscriptionItemUpdateInput!
}

input StripeSubscriptionItemCreateInput {
  quantity: Int
  created: Int
  discounts: JSON
  subscription: StripeSubscriptionRelateToOneForCreateInput
  price: StripePriceRelateToOneForCreateInput
}

input StripePriceRelateToOneForCreateInput {
  create: StripePriceCreateInput
  connect: StripePriceWhereUniqueInput
}

type StripePrice {
  id: ID!
  lookupKey: String
  active: Boolean
  billingScheme: String
  created: Int
  livemode: Boolean
  subscriptionItem(where: StripeSubscriptionItemWhereInput! = {}, orderBy: [StripeSubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeSubscriptionItemWhereUniqueInput): [StripeSubscriptionItem!]
  subscriptionItemCount(where: StripeSubscriptionItemWhereInput! = {}): Int
  product: StripeProduct
  lineItems(where: StripeLineItemWhereInput! = {}, orderBy: [StripeLineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeLineItemWhereUniqueInput): [StripeLineItem!]
  lineItemsCount(where: StripeLineItemWhereInput! = {}): Int
  currency: String
  unitAmount: Int
  unitAmountDecimal: String
  recurring: JSON
  metadata: JSON
  nickname: String
  type: String
  currencyOptions: JSON
  taxBehavior: String
  tiers: JSON
  tiersMode: JSON
  transformQuantity: JSON
}

input StripePriceWhereUniqueInput {
  id: ID
}

input StripePriceWhereInput {
  AND: [StripePriceWhereInput!]
  OR: [StripePriceWhereInput!]
  NOT: [StripePriceWhereInput!]
  id: IDFilter
  lookupKey: StringNullableFilter
  active: BooleanFilter
  billingScheme: StringFilter
  created: IntFilter
  livemode: BooleanFilter
  subscriptionItem: StripeSubscriptionItemManyRelationFilter
  product: StripeProductWhereInput
  lineItems: StripeLineItemManyRelationFilter
  currency: StringFilter
  unitAmount: IntNullableFilter
  unitAmountDecimal: StringNullableFilter
  nickname: StringNullableFilter
  type: StringFilter
  taxBehavior: StringNullableFilter
}

input StripeLineItemManyRelationFilter {
  every: StripeLineItemWhereInput
  some: StripeLineItemWhereInput
  none: StripeLineItemWhereInput
}

input StripePriceOrderByInput {
  id: OrderDirection
  lookupKey: OrderDirection
  active: OrderDirection
  billingScheme: OrderDirection
  created: OrderDirection
  livemode: OrderDirection
  currency: OrderDirection
  unitAmount: OrderDirection
  unitAmountDecimal: OrderDirection
  nickname: OrderDirection
  type: OrderDirection
  taxBehavior: OrderDirection
}

input StripePriceUpdateInput {
  lookupKey: String
  active: Boolean
  billingScheme: String
  created: Int
  livemode: Boolean
  subscriptionItem: StripeSubscriptionItemRelateToManyForUpdateInput
  product: StripeProductRelateToOneForUpdateInput
  lineItems: StripeLineItemRelateToManyForUpdateInput
  currency: String
  unitAmount: Int
  unitAmountDecimal: String
  recurring: JSON
  metadata: JSON
  nickname: String
  type: String
  currencyOptions: JSON
  taxBehavior: String
  tiers: JSON
  tiersMode: JSON
  transformQuantity: JSON
}

input StripeProductRelateToOneForUpdateInput {
  create: StripeProductCreateInput
  connect: StripeProductWhereUniqueInput
  disconnect: Boolean
}

input StripeLineItemRelateToManyForUpdateInput {
  disconnect: [StripeLineItemWhereUniqueInput!]
  set: [StripeLineItemWhereUniqueInput!]
  create: [StripeLineItemCreateInput!]
  connect: [StripeLineItemWhereUniqueInput!]
}

input StripePriceUpdateArgs {
  where: StripePriceWhereUniqueInput!
  data: StripePriceUpdateInput!
}

input StripePriceCreateInput {
  lookupKey: String
  active: Boolean
  billingScheme: String
  created: Int
  livemode: Boolean
  subscriptionItem: StripeSubscriptionItemRelateToManyForCreateInput
  product: StripeProductRelateToOneForCreateInput
  lineItems: StripeLineItemRelateToManyForCreateInput
  currency: String
  unitAmount: Int
  unitAmountDecimal: String
  recurring: JSON
  metadata: JSON
  nickname: String
  type: String
  currencyOptions: JSON
  taxBehavior: String
  tiers: JSON
  tiersMode: JSON
  transformQuantity: JSON
}

input StripeProductRelateToOneForCreateInput {
  create: StripeProductCreateInput
  connect: StripeProductWhereUniqueInput
}

input StripeLineItemRelateToManyForCreateInput {
  create: [StripeLineItemCreateInput!]
  connect: [StripeLineItemWhereUniqueInput!]
}

type StripeProduct {
  id: ID!
  active: Boolean
  name: String
  description: String
  taxCode: String
  type: String
  created: Int
  updated: Int
  unitLabel: String
  url: String
  images: JSON
  livemode: Boolean
  marketingFeatures: JSON
  metadata: JSON
  packageDimensions: JSON
  shippable: Boolean
  statementDescriptor: String
  prices(where: StripePriceWhereInput! = {}, orderBy: [StripePriceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripePriceWhereUniqueInput): [StripePrice!]
  pricesCount(where: StripePriceWhereInput! = {}): Int
}

input StripeProductWhereUniqueInput {
  id: ID
}

input StripeProductWhereInput {
  AND: [StripeProductWhereInput!]
  OR: [StripeProductWhereInput!]
  NOT: [StripeProductWhereInput!]
  id: IDFilter
  active: BooleanFilter
  name: StringFilter
  description: StringNullableFilter
  taxCode: StringNullableFilter
  type: StringNullableFilter
  created: IntFilter
  updated: IntFilter
  unitLabel: StringNullableFilter
  url: StringNullableFilter
  livemode: BooleanFilter
  shippable: BooleanFilter
  statementDescriptor: StringNullableFilter
  prices: StripePriceManyRelationFilter
}

input StripePriceManyRelationFilter {
  every: StripePriceWhereInput
  some: StripePriceWhereInput
  none: StripePriceWhereInput
}

input StripeProductOrderByInput {
  id: OrderDirection
  active: OrderDirection
  name: OrderDirection
  description: OrderDirection
  taxCode: OrderDirection
  type: OrderDirection
  created: OrderDirection
  updated: OrderDirection
  unitLabel: OrderDirection
  url: OrderDirection
  livemode: OrderDirection
  shippable: OrderDirection
  statementDescriptor: OrderDirection
}

input StripeProductUpdateInput {
  active: Boolean
  name: String
  description: String
  taxCode: String
  type: String
  created: Int
  updated: Int
  unitLabel: String
  url: String
  images: JSON
  livemode: Boolean
  marketingFeatures: JSON
  metadata: JSON
  packageDimensions: JSON
  shippable: Boolean
  statementDescriptor: String
  prices: StripePriceRelateToManyForUpdateInput
}

input StripePriceRelateToManyForUpdateInput {
  disconnect: [StripePriceWhereUniqueInput!]
  set: [StripePriceWhereUniqueInput!]
  create: [StripePriceCreateInput!]
  connect: [StripePriceWhereUniqueInput!]
}

input StripeProductUpdateArgs {
  where: StripeProductWhereUniqueInput!
  data: StripeProductUpdateInput!
}

input StripeProductCreateInput {
  active: Boolean
  name: String
  description: String
  taxCode: String
  type: String
  created: Int
  updated: Int
  unitLabel: String
  url: String
  images: JSON
  livemode: Boolean
  marketingFeatures: JSON
  metadata: JSON
  packageDimensions: JSON
  shippable: Boolean
  statementDescriptor: String
  prices: StripePriceRelateToManyForCreateInput
}

input StripePriceRelateToManyForCreateInput {
  create: [StripePriceCreateInput!]
  connect: [StripePriceWhereUniqueInput!]
}

type StripeCheckoutSession {
  id: ID!
  customer: StripeCustomer
  unitAmount: Int
  totalAmount: Int
  currency: String
  allowPromotionCodes: Boolean
  clientReferenceId: String
  clientSecret: String
  consent: String
  consentCollection: String
  created: Int
  expiresAt: Int
  invoiceId: String
  invoiceCreation: String
  locale: String
  mode: String
  paymentIntentId: String
  paymentStatus: String
  recoveredFrom: String
  subscriptionId: String
  successUrl: String
  cancelUrl: String
  status: String
  url: String
  shippingAddressCollection: String
  shippingDetails: String
  livemode: Boolean
  lineItems(where: StripeLineItemWhereInput! = {}, orderBy: [StripeLineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeLineItemWhereUniqueInput): [StripeLineItem!]
  lineItemsCount(where: StripeLineItemWhereInput! = {}): Int
}

input StripeCheckoutSessionWhereUniqueInput {
  id: ID
}

input StripeCheckoutSessionWhereInput {
  AND: [StripeCheckoutSessionWhereInput!]
  OR: [StripeCheckoutSessionWhereInput!]
  NOT: [StripeCheckoutSessionWhereInput!]
  id: IDFilter
  customer: StripeCustomerWhereInput
  unitAmount: IntNullableFilter
  totalAmount: IntNullableFilter
  currency: StringFilter
  allowPromotionCodes: BooleanFilter
  clientReferenceId: StringNullableFilter
  clientSecret: StringNullableFilter
  consent: StringNullableFilter
  consentCollection: StringNullableFilter
  created: IntFilter
  expiresAt: IntNullableFilter
  invoiceId: StringNullableFilter
  invoiceCreation: StringNullableFilter
  locale: StringNullableFilter
  mode: StringFilter
  paymentIntentId: StringNullableFilter
  paymentStatus: StringFilter
  recoveredFrom: StringNullableFilter
  subscriptionId: StringNullableFilter
  successUrl: StringNullableFilter
  cancelUrl: StringNullableFilter
  status: StringNullableFilter
  url: StringNullableFilter
  shippingAddressCollection: StringNullableFilter
  shippingDetails: StringNullableFilter
  livemode: BooleanFilter
  lineItems: StripeLineItemManyRelationFilter
}

input StripeCheckoutSessionOrderByInput {
  id: OrderDirection
  unitAmount: OrderDirection
  totalAmount: OrderDirection
  currency: OrderDirection
  allowPromotionCodes: OrderDirection
  clientReferenceId: OrderDirection
  clientSecret: OrderDirection
  consent: OrderDirection
  consentCollection: OrderDirection
  created: OrderDirection
  expiresAt: OrderDirection
  invoiceId: OrderDirection
  invoiceCreation: OrderDirection
  locale: OrderDirection
  mode: OrderDirection
  paymentIntentId: OrderDirection
  paymentStatus: OrderDirection
  recoveredFrom: OrderDirection
  subscriptionId: OrderDirection
  successUrl: OrderDirection
  cancelUrl: OrderDirection
  status: OrderDirection
  url: OrderDirection
  shippingAddressCollection: OrderDirection
  shippingDetails: OrderDirection
  livemode: OrderDirection
}

input StripeCheckoutSessionUpdateInput {
  customer: StripeCustomerRelateToOneForUpdateInput
  unitAmount: Int
  totalAmount: Int
  currency: String
  allowPromotionCodes: Boolean
  clientReferenceId: String
  clientSecret: String
  consent: String
  consentCollection: String
  created: Int
  expiresAt: Int
  invoiceId: String
  invoiceCreation: String
  locale: String
  mode: String
  paymentIntentId: String
  paymentStatus: String
  recoveredFrom: String
  subscriptionId: String
  successUrl: String
  cancelUrl: String
  status: String
  url: String
  shippingAddressCollection: String
  shippingDetails: String
  livemode: Boolean
  lineItems: StripeLineItemRelateToManyForUpdateInput
}

input StripeCheckoutSessionUpdateArgs {
  where: StripeCheckoutSessionWhereUniqueInput!
  data: StripeCheckoutSessionUpdateInput!
}

input StripeCheckoutSessionCreateInput {
  customer: StripeCustomerRelateToOneForCreateInput
  unitAmount: Int
  totalAmount: Int
  currency: String
  allowPromotionCodes: Boolean
  clientReferenceId: String
  clientSecret: String
  consent: String
  consentCollection: String
  created: Int
  expiresAt: Int
  invoiceId: String
  invoiceCreation: String
  locale: String
  mode: String
  paymentIntentId: String
  paymentStatus: String
  recoveredFrom: String
  subscriptionId: String
  successUrl: String
  cancelUrl: String
  status: String
  url: String
  shippingAddressCollection: String
  shippingDetails: String
  livemode: Boolean
  lineItems: StripeLineItemRelateToManyForCreateInput
}

type StripeLineItem {
  id: ID!
  ammountDiscount: Int
  ammountSubtotal: Int
  ammountTotal: Int
  ammountTax: Int
  currency: String
  description: String
  taxes: JSON
  discounts: JSON
  price: StripePrice
  checkoutSession: StripeCheckoutSession
}

input StripeLineItemWhereUniqueInput {
  id: ID
}

input StripeLineItemWhereInput {
  AND: [StripeLineItemWhereInput!]
  OR: [StripeLineItemWhereInput!]
  NOT: [StripeLineItemWhereInput!]
  id: IDFilter
  ammountDiscount: IntNullableFilter
  ammountSubtotal: IntNullableFilter
  ammountTotal: IntNullableFilter
  ammountTax: IntNullableFilter
  currency: StringFilter
  description: StringFilter
  price: StripePriceWhereInput
  checkoutSession: StripeCheckoutSessionWhereInput
}

input StripeLineItemOrderByInput {
  id: OrderDirection
  ammountDiscount: OrderDirection
  ammountSubtotal: OrderDirection
  ammountTotal: OrderDirection
  ammountTax: OrderDirection
  currency: OrderDirection
  description: OrderDirection
}

input StripeLineItemUpdateInput {
  ammountDiscount: Int
  ammountSubtotal: Int
  ammountTotal: Int
  ammountTax: Int
  currency: String
  description: String
  taxes: JSON
  discounts: JSON
  price: StripePriceRelateToOneForUpdateInput
  checkoutSession: StripeCheckoutSessionRelateToOneForUpdateInput
}

input StripeCheckoutSessionRelateToOneForUpdateInput {
  create: StripeCheckoutSessionCreateInput
  connect: StripeCheckoutSessionWhereUniqueInput
  disconnect: Boolean
}

input StripeLineItemUpdateArgs {
  where: StripeLineItemWhereUniqueInput!
  data: StripeLineItemUpdateInput!
}

input StripeLineItemCreateInput {
  ammountDiscount: Int
  ammountSubtotal: Int
  ammountTotal: Int
  ammountTax: Int
  currency: String
  description: String
  taxes: JSON
  discounts: JSON
  price: StripePriceRelateToOneForCreateInput
  checkoutSession: StripeCheckoutSessionRelateToOneForCreateInput
}

input StripeCheckoutSessionRelateToOneForCreateInput {
  create: StripeCheckoutSessionCreateInput
  connect: StripeCheckoutSessionWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createCMSAdminUser(data: CMSAdminUserCreateInput!): CMSAdminUser
  createCMSAdminUsers(data: [CMSAdminUserCreateInput!]!): [CMSAdminUser]
  updateCMSAdminUser(where: CMSAdminUserWhereUniqueInput!, data: CMSAdminUserUpdateInput!): CMSAdminUser
  updateCMSAdminUsers(data: [CMSAdminUserUpdateArgs!]!): [CMSAdminUser]
  deleteCMSAdminUser(where: CMSAdminUserWhereUniqueInput!): CMSAdminUser
  deleteCMSAdminUsers(where: [CMSAdminUserWhereUniqueInput!]!): [CMSAdminUser]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSession(data: SessionCreateInput!): Session
  createSessions(data: [SessionCreateInput!]!): [Session]
  updateSession(where: SessionWhereUniqueInput!, data: SessionUpdateInput!): Session
  updateSessions(data: [SessionUpdateArgs!]!): [Session]
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSessions(where: [SessionWhereUniqueInput!]!): [Session]
  createAccount(data: AccountCreateInput!): Account
  createAccounts(data: [AccountCreateInput!]!): [Account]
  updateAccount(where: AccountWhereUniqueInput!, data: AccountUpdateInput!): Account
  updateAccounts(data: [AccountUpdateArgs!]!): [Account]
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteAccounts(where: [AccountWhereUniqueInput!]!): [Account]
  createVerificationToken(data: VerificationTokenCreateInput!): VerificationToken
  createVerificationTokens(data: [VerificationTokenCreateInput!]!): [VerificationToken]
  updateVerificationToken(where: VerificationTokenWhereUniqueInput!, data: VerificationTokenUpdateInput!): VerificationToken
  updateVerificationTokens(data: [VerificationTokenUpdateArgs!]!): [VerificationToken]
  deleteVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  deleteVerificationTokens(where: [VerificationTokenWhereUniqueInput!]!): [VerificationToken]
  createStripeCustomer(data: StripeCustomerCreateInput!): StripeCustomer
  createStripeCustomers(data: [StripeCustomerCreateInput!]!): [StripeCustomer]
  updateStripeCustomer(where: StripeCustomerWhereUniqueInput!, data: StripeCustomerUpdateInput!): StripeCustomer
  updateStripeCustomers(data: [StripeCustomerUpdateArgs!]!): [StripeCustomer]
  deleteStripeCustomer(where: StripeCustomerWhereUniqueInput!): StripeCustomer
  deleteStripeCustomers(where: [StripeCustomerWhereUniqueInput!]!): [StripeCustomer]
  createStripeSubscription(data: StripeSubscriptionCreateInput!): StripeSubscription
  createStripeSubscriptions(data: [StripeSubscriptionCreateInput!]!): [StripeSubscription]
  updateStripeSubscription(where: StripeSubscriptionWhereUniqueInput!, data: StripeSubscriptionUpdateInput!): StripeSubscription
  updateStripeSubscriptions(data: [StripeSubscriptionUpdateArgs!]!): [StripeSubscription]
  deleteStripeSubscription(where: StripeSubscriptionWhereUniqueInput!): StripeSubscription
  deleteStripeSubscriptions(where: [StripeSubscriptionWhereUniqueInput!]!): [StripeSubscription]
  createStripeSubscriptionItem(data: StripeSubscriptionItemCreateInput!): StripeSubscriptionItem
  createStripeSubscriptionItems(data: [StripeSubscriptionItemCreateInput!]!): [StripeSubscriptionItem]
  updateStripeSubscriptionItem(where: StripeSubscriptionItemWhereUniqueInput!, data: StripeSubscriptionItemUpdateInput!): StripeSubscriptionItem
  updateStripeSubscriptionItems(data: [StripeSubscriptionItemUpdateArgs!]!): [StripeSubscriptionItem]
  deleteStripeSubscriptionItem(where: StripeSubscriptionItemWhereUniqueInput!): StripeSubscriptionItem
  deleteStripeSubscriptionItems(where: [StripeSubscriptionItemWhereUniqueInput!]!): [StripeSubscriptionItem]
  createStripePrice(data: StripePriceCreateInput!): StripePrice
  createStripePrices(data: [StripePriceCreateInput!]!): [StripePrice]
  updateStripePrice(where: StripePriceWhereUniqueInput!, data: StripePriceUpdateInput!): StripePrice
  updateStripePrices(data: [StripePriceUpdateArgs!]!): [StripePrice]
  deleteStripePrice(where: StripePriceWhereUniqueInput!): StripePrice
  deleteStripePrices(where: [StripePriceWhereUniqueInput!]!): [StripePrice]
  createStripeProduct(data: StripeProductCreateInput!): StripeProduct
  createStripeProducts(data: [StripeProductCreateInput!]!): [StripeProduct]
  updateStripeProduct(where: StripeProductWhereUniqueInput!, data: StripeProductUpdateInput!): StripeProduct
  updateStripeProducts(data: [StripeProductUpdateArgs!]!): [StripeProduct]
  deleteStripeProduct(where: StripeProductWhereUniqueInput!): StripeProduct
  deleteStripeProducts(where: [StripeProductWhereUniqueInput!]!): [StripeProduct]
  createStripeCheckoutSession(data: StripeCheckoutSessionCreateInput!): StripeCheckoutSession
  createStripeCheckoutSessions(data: [StripeCheckoutSessionCreateInput!]!): [StripeCheckoutSession]
  updateStripeCheckoutSession(where: StripeCheckoutSessionWhereUniqueInput!, data: StripeCheckoutSessionUpdateInput!): StripeCheckoutSession
  updateStripeCheckoutSessions(data: [StripeCheckoutSessionUpdateArgs!]!): [StripeCheckoutSession]
  deleteStripeCheckoutSession(where: StripeCheckoutSessionWhereUniqueInput!): StripeCheckoutSession
  deleteStripeCheckoutSessions(where: [StripeCheckoutSessionWhereUniqueInput!]!): [StripeCheckoutSession]
  createStripeLineItem(data: StripeLineItemCreateInput!): StripeLineItem
  createStripeLineItems(data: [StripeLineItemCreateInput!]!): [StripeLineItem]
  updateStripeLineItem(where: StripeLineItemWhereUniqueInput!, data: StripeLineItemUpdateInput!): StripeLineItem
  updateStripeLineItems(data: [StripeLineItemUpdateArgs!]!): [StripeLineItem]
  deleteStripeLineItem(where: StripeLineItemWhereUniqueInput!): StripeLineItem
  deleteStripeLineItems(where: [StripeLineItemWhereUniqueInput!]!): [StripeLineItem]
  endSession: Boolean!
  authenticateCMSAdminUserWithPassword(email: String!, password: String!): CMSAdminUserAuthenticationWithPasswordResult
  createInitialCMSAdminUser(data: CreateInitialCMSAdminUserInput!): CMSAdminUserAuthenticationWithPasswordSuccess!
}

union CMSAdminUserAuthenticationWithPasswordResult = CMSAdminUserAuthenticationWithPasswordSuccess | CMSAdminUserAuthenticationWithPasswordFailure

type CMSAdminUserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: CMSAdminUser!
}

type CMSAdminUserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialCMSAdminUserInput {
  name: String
  email: String
  password: String
}

type Query {
  cMSAdminUser(where: CMSAdminUserWhereUniqueInput!): CMSAdminUser
  cMSAdminUsers(where: CMSAdminUserWhereInput! = {}, orderBy: [CMSAdminUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CMSAdminUserWhereUniqueInput): [CMSAdminUser!]
  cMSAdminUsersCount(where: CMSAdminUserWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  session(where: SessionWhereUniqueInput!): Session
  sessions(where: SessionWhereInput! = {}, orderBy: [SessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SessionWhereUniqueInput): [Session!]
  sessionsCount(where: SessionWhereInput! = {}): Int
  account(where: AccountWhereUniqueInput!): Account
  accounts(where: AccountWhereInput! = {}, orderBy: [AccountOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AccountWhereUniqueInput): [Account!]
  accountsCount(where: AccountWhereInput! = {}): Int
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(where: VerificationTokenWhereInput! = {}, orderBy: [VerificationTokenOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VerificationTokenWhereUniqueInput): [VerificationToken!]
  verificationTokensCount(where: VerificationTokenWhereInput! = {}): Int
  stripeCustomer(where: StripeCustomerWhereUniqueInput!): StripeCustomer
  stripeCustomers(where: StripeCustomerWhereInput! = {}, orderBy: [StripeCustomerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeCustomerWhereUniqueInput): [StripeCustomer!]
  stripeCustomersCount(where: StripeCustomerWhereInput! = {}): Int
  stripeSubscription(where: StripeSubscriptionWhereUniqueInput!): StripeSubscription
  stripeSubscriptions(where: StripeSubscriptionWhereInput! = {}, orderBy: [StripeSubscriptionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeSubscriptionWhereUniqueInput): [StripeSubscription!]
  stripeSubscriptionsCount(where: StripeSubscriptionWhereInput! = {}): Int
  stripeSubscriptionItem(where: StripeSubscriptionItemWhereUniqueInput!): StripeSubscriptionItem
  stripeSubscriptionItems(where: StripeSubscriptionItemWhereInput! = {}, orderBy: [StripeSubscriptionItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeSubscriptionItemWhereUniqueInput): [StripeSubscriptionItem!]
  stripeSubscriptionItemsCount(where: StripeSubscriptionItemWhereInput! = {}): Int
  stripePrice(where: StripePriceWhereUniqueInput!): StripePrice
  stripePrices(where: StripePriceWhereInput! = {}, orderBy: [StripePriceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripePriceWhereUniqueInput): [StripePrice!]
  stripePricesCount(where: StripePriceWhereInput! = {}): Int
  stripeProduct(where: StripeProductWhereUniqueInput!): StripeProduct
  stripeProducts(where: StripeProductWhereInput! = {}, orderBy: [StripeProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeProductWhereUniqueInput): [StripeProduct!]
  stripeProductsCount(where: StripeProductWhereInput! = {}): Int
  stripeCheckoutSession(where: StripeCheckoutSessionWhereUniqueInput!): StripeCheckoutSession
  stripeCheckoutSessions(where: StripeCheckoutSessionWhereInput! = {}, orderBy: [StripeCheckoutSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeCheckoutSessionWhereUniqueInput): [StripeCheckoutSession!]
  stripeCheckoutSessionsCount(where: StripeCheckoutSessionWhereInput! = {}): Int
  stripeLineItem(where: StripeLineItemWhereUniqueInput!): StripeLineItem
  stripeLineItems(where: StripeLineItemWhereInput! = {}, orderBy: [StripeLineItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StripeLineItemWhereUniqueInput): [StripeLineItem!]
  stripeLineItemsCount(where: StripeLineItemWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = CMSAdminUser

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
