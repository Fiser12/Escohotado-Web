/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  jsonb,
  boolean,
  serial,
  numeric,
  type AnyPgColumn,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum__locales = pgEnum('enum__locales', ['en', 'es'])
export const enum_prices_type = pgEnum('enum_prices_type', ['one_time', 'recurring'])
export const enum_prices_interval = pgEnum('enum_prices_interval', ['day', 'week', 'month', 'year'])
export const enum_products_type = pgEnum('enum_products_type', ['good', 'service'])
export const enum_article_web_status = pgEnum('enum_article_web_status', ['draft', 'published'])
export const enum__article_web_v_version_status = pgEnum('enum__article_web_v_version_status', [
  'draft',
  'published',
])
export const enum__article_web_v_published_locale = pgEnum('enum__article_web_v_published_locale', [
  'en',
  'es',
])
export const enum_book_ediciones_variant = pgEnum('enum_book_ediciones_variant', [
  'audiobook',
  'ebook',
  'book',
])
export const enum_book_ediciones_language = pgEnum('enum_book_ediciones_language', ['es', 'en'])

export const users_accounts = pgTable(
  'users_accounts',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    provider: varchar('provider').notNull(),
    providerAccountId: varchar('provider_account_id').notNull(),
    type: varchar('type').notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_accounts_order_idx').on(columns._order),
    _parentIDIdx: index('users_accounts_parent_id_idx').on(columns._parentID),
    users_accounts_provider_account_id_idx: index('users_accounts_provider_account_id_idx').on(
      columns.providerAccountId,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_accounts_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    sessionToken: varchar('session_token').notNull(),
    expires: timestamp('expires', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    users_sessions_session_token_idx: index('users_sessions_session_token_idx').on(
      columns.sessionToken,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: varchar('id').primaryKey(),
    email: varchar('email').notNull(),
    emailVerified: timestamp('email_verified', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    name: varchar('name'),
    image: varchar('image'),
    roles: jsonb('roles'),
    isSubscribedToNewsletter: boolean('is_subscribed_to_newsletter').notNull().default(true),
    inventory: jsonb('inventory'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
  }),
)

export const prices = pgTable(
  'prices',
  {
    id: serial('id').primaryKey(),
    stripeID: varchar('stripe_i_d').notNull(),
    stripeProductId: varchar('stripe_product_id').notNull(),
    active: boolean('active').notNull().default(false),
    description: varchar('description'),
    unitAmount: numeric('unit_amount').notNull(),
    currency: varchar('currency').notNull(),
    type: enum_prices_type('type').notNull(),
    interval: enum_prices_interval('interval'),
    intervalCount: numeric('interval_count'),
    trialPeriodDays: numeric('trial_period_days'),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    prices_updated_at_idx: index('prices_updated_at_idx').on(columns.updatedAt),
    prices_created_at_idx: index('prices_created_at_idx').on(columns.createdAt),
  }),
)

export const products_images = pgTable(
  'products_images',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    url: varchar('url'),
  },
  (columns) => ({
    _orderIdx: index('products_images_order_idx').on(columns._order),
    _parentIDIdx: index('products_images_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_images_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_features = pgTable(
  'products_features',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('products_features_order_idx').on(columns._order),
    _parentIDIdx: index('products_features_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_features_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    stripeID: varchar('stripe_i_d').notNull(),
    type: enum_products_type('type'),
    active: boolean('active').notNull().default(false),
    name: varchar('name').notNull(),
    description: varchar('description'),
    metadata: jsonb('metadata'),
    permissions_seeds: varchar('permissions_seeds').default(''),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pricesID: integer('prices_id'),
    permissionID: integer('permission_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_prices_id_idx: index('products_rels_prices_id_idx').on(columns.pricesID),
    products_rels_permission_id_idx: index('products_rels_permission_id_idx').on(
      columns.permissionID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    pricesIdFk: foreignKey({
      columns: [columns['pricesID']],
      foreignColumns: [prices.id],
      name: 'products_rels_prices_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: 'products_rels_permission_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    rawContent: varchar('raw_content'),
    prefix: varchar('prefix').default('media'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
  }),
)

export const taxonomy_breadcrumbs = pgTable(
  'taxonomy_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _locale: enum__locales('_locale').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => taxonomy.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('taxonomy_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('taxonomy_breadcrumbs_parent_id_idx').on(columns._parentID),
    _localeIdx: index('taxonomy_breadcrumbs_locale_idx').on(columns._locale),
    taxonomy_breadcrumbs_doc_idx: index('taxonomy_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [taxonomy.id],
      name: 'taxonomy_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const taxonomy = pgTable(
  'taxonomy',
  {
    id: serial('id').primaryKey(),
    selectable: boolean('selectable').default(true),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    parent: integer('parent_id').references((): AnyPgColumn => taxonomy.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    taxonomy_slug_idx: index('taxonomy_slug_idx').on(columns.slug),
    taxonomy_parent_idx: index('taxonomy_parent_idx').on(columns.parent),
    taxonomy_updated_at_idx: index('taxonomy_updated_at_idx').on(columns.updatedAt),
    taxonomy_created_at_idx: index('taxonomy_created_at_idx').on(columns.createdAt),
  }),
)

export const taxonomy_locales = pgTable(
  'taxonomy_locales',
  {
    singular_name: varchar('singular_name').notNull(),
    plural_name: varchar('plural_name'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('taxonomy_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [taxonomy.id],
      name: 'taxonomy_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pdf = pgTable(
  'pdf',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    permissions_seeds: varchar('permissions_seeds').default(''),
    prefix: varchar('prefix').default('pdf'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    pdf_updated_at_idx: index('pdf_updated_at_idx').on(columns.updatedAt),
    pdf_created_at_idx: index('pdf_created_at_idx').on(columns.createdAt),
    pdf_filename_idx: uniqueIndex('pdf_filename_idx').on(columns.filename),
  }),
)

export const pdf_rels = pgTable(
  'pdf_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    permissionID: integer('permission_id'),
  },
  (columns) => ({
    order: index('pdf_rels_order_idx').on(columns.order),
    parentIdx: index('pdf_rels_parent_idx').on(columns.parent),
    pathIdx: index('pdf_rels_path_idx').on(columns.path),
    pdf_rels_permission_id_idx: index('pdf_rels_permission_id_idx').on(columns.permissionID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pdf.id],
      name: 'pdf_rels_parent_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: 'pdf_rels_permission_fk',
    }).onDelete('cascade'),
  }),
)

export const article_web = pgTable(
  'article_web',
  {
    id: serial('id').primaryKey(),
    permissions_seeds: varchar('permissions_seeds').default(''),
    cover: integer('cover_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    forum_post_id: varchar('forum_post_id'),
    last_forum_sync: timestamp('last_forum_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    last_forum_posts: jsonb('last_forum_posts'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_article_web_status('_status').default('draft'),
  },
  (columns) => ({
    article_web_cover_idx: index('article_web_cover_idx').on(columns.cover),
    article_web_slug_idx: index('article_web_slug_idx').on(columns.slug),
    article_web_updated_at_idx: index('article_web_updated_at_idx').on(columns.updatedAt),
    article_web_created_at_idx: index('article_web_created_at_idx').on(columns.createdAt),
    article_web__status_idx: index('article_web__status_idx').on(columns._status),
  }),
)

export const article_web_locales = pgTable(
  'article_web_locales',
  {
    title: varchar('title'),
    content: jsonb('content'),
    source: varchar('source'),
    preview_content: jsonb('preview_content'),
    document: integer('document_id').references(() => pdf.id, {
      onDelete: 'set null',
    }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    article_web_document_idx: index('article_web_document_idx').on(
      columns.document,
      columns._locale,
    ),
    _localeParent: uniqueIndex('article_web_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [article_web.id],
      name: 'article_web_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const article_web_rels = pgTable(
  'article_web_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    permissionID: integer('permission_id'),
    taxonomyID: integer('taxonomy_id'),
  },
  (columns) => ({
    order: index('article_web_rels_order_idx').on(columns.order),
    parentIdx: index('article_web_rels_parent_idx').on(columns.parent),
    pathIdx: index('article_web_rels_path_idx').on(columns.path),
    article_web_rels_permission_id_idx: index('article_web_rels_permission_id_idx').on(
      columns.permissionID,
    ),
    article_web_rels_taxonomy_id_idx: index('article_web_rels_taxonomy_id_idx').on(
      columns.taxonomyID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [article_web.id],
      name: 'article_web_rels_parent_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: 'article_web_rels_permission_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: 'article_web_rels_taxonomy_fk',
    }).onDelete('cascade'),
  }),
)

export const _article_web_v = pgTable(
  '_article_web_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => article_web.id, {
      onDelete: 'set null',
    }),
    version_permissions_seeds: varchar('version_permissions_seeds').default(''),
    version_cover: integer('version_cover_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_forum_post_id: varchar('version_forum_post_id'),
    version_last_forum_sync: timestamp('version_last_forum_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_last_forum_posts: jsonb('version_last_forum_posts'),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__article_web_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    snapshot: boolean('snapshot'),
    publishedLocale: enum__article_web_v_published_locale('published_locale'),
    latest: boolean('latest'),
  },
  (columns) => ({
    _article_web_v_parent_idx: index('_article_web_v_parent_idx').on(columns.parent),
    _article_web_v_version_version_cover_idx: index('_article_web_v_version_version_cover_idx').on(
      columns.version_cover,
    ),
    _article_web_v_version_version_slug_idx: index('_article_web_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _article_web_v_version_version_updated_at_idx: index(
      '_article_web_v_version_version_updated_at_idx',
    ).on(columns.version_updatedAt),
    _article_web_v_version_version_created_at_idx: index(
      '_article_web_v_version_version_created_at_idx',
    ).on(columns.version_createdAt),
    _article_web_v_version_version__status_idx: index(
      '_article_web_v_version_version__status_idx',
    ).on(columns.version__status),
    _article_web_v_created_at_idx: index('_article_web_v_created_at_idx').on(columns.createdAt),
    _article_web_v_updated_at_idx: index('_article_web_v_updated_at_idx').on(columns.updatedAt),
    _article_web_v_snapshot_idx: index('_article_web_v_snapshot_idx').on(columns.snapshot),
    _article_web_v_published_locale_idx: index('_article_web_v_published_locale_idx').on(
      columns.publishedLocale,
    ),
    _article_web_v_latest_idx: index('_article_web_v_latest_idx').on(columns.latest),
  }),
)

export const _article_web_v_locales = pgTable(
  '_article_web_v_locales',
  {
    version_title: varchar('version_title'),
    version_content: jsonb('version_content'),
    version_source: varchar('version_source'),
    version_preview_content: jsonb('version_preview_content'),
    version_document: integer('version_document_id').references(() => pdf.id, {
      onDelete: 'set null',
    }),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _article_web_v_version_version_document_idx: index(
      '_article_web_v_version_version_document_idx',
    ).on(columns.version_document, columns._locale),
    _localeParent: uniqueIndex('_article_web_v_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_article_web_v.id],
      name: '_article_web_v_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _article_web_v_rels = pgTable(
  '_article_web_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    permissionID: integer('permission_id'),
    taxonomyID: integer('taxonomy_id'),
  },
  (columns) => ({
    order: index('_article_web_v_rels_order_idx').on(columns.order),
    parentIdx: index('_article_web_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_article_web_v_rels_path_idx').on(columns.path),
    _article_web_v_rels_permission_id_idx: index('_article_web_v_rels_permission_id_idx').on(
      columns.permissionID,
    ),
    _article_web_v_rels_taxonomy_id_idx: index('_article_web_v_rels_taxonomy_id_idx').on(
      columns.taxonomyID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_article_web_v.id],
      name: '_article_web_v_rels_parent_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: '_article_web_v_rels_permission_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: '_article_web_v_rels_taxonomy_fk',
    }).onDelete('cascade'),
  }),
)

export const book_ediciones = pgTable(
  'book_ediciones',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link: varchar('link'),
    variant: enum_book_ediciones_variant('variant'),
    language: enum_book_ediciones_language('language'),
  },
  (columns) => ({
    _orderIdx: index('book_ediciones_order_idx').on(columns._order),
    _parentIDIdx: index('book_ediciones_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [book.id],
      name: 'book_ediciones_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const book = pgTable(
  'book',
  {
    id: serial('id').primaryKey(),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    cover: integer('cover_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    forum_post_id: varchar('forum_post_id'),
    last_forum_sync: timestamp('last_forum_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    last_forum_posts: jsonb('last_forum_posts'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    book_cover_idx: index('book_cover_idx').on(columns.cover),
    book_slug_idx: index('book_slug_idx').on(columns.slug),
    book_updated_at_idx: index('book_updated_at_idx').on(columns.updatedAt),
    book_created_at_idx: index('book_created_at_idx').on(columns.createdAt),
  }),
)

export const book_locales = pgTable(
  'book_locales',
  {
    title: varchar('title').notNull(),
    description: varchar('description'),
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('book_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [book.id],
      name: 'book_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const book_rels = pgTable(
  'book_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    taxonomyID: integer('taxonomy_id'),
  },
  (columns) => ({
    order: index('book_rels_order_idx').on(columns.order),
    parentIdx: index('book_rels_parent_idx').on(columns.parent),
    pathIdx: index('book_rels_path_idx').on(columns.path),
    book_rels_taxonomy_id_idx: index('book_rels_taxonomy_id_idx').on(columns.taxonomyID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [book.id],
      name: 'book_rels_parent_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: 'book_rels_taxonomy_fk',
    }).onDelete('cascade'),
  }),
)

export const video = pgTable(
  'video',
  {
    id: serial('id').primaryKey(),
    permissions_seeds: varchar('permissions_seeds').default(''),
    tags: jsonb('tags'),
    thumbnailUrl: varchar('thumbnail_url'),
    viewCount: numeric('view_count'),
    duration: numeric('duration'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    forum_post_id: varchar('forum_post_id'),
    last_forum_sync: timestamp('last_forum_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    last_forum_posts: jsonb('last_forum_posts'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    video_updated_at_idx: index('video_updated_at_idx').on(columns.updatedAt),
    video_created_at_idx: index('video_created_at_idx').on(columns.createdAt),
  }),
)

export const video_locales = pgTable(
  'video_locales',
  {
    content: jsonb('content'),
    url: varchar('url').notNull(),
    url_free: varchar('url_free'),
    title: varchar('title'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    video_url_idx: uniqueIndex('video_url_idx').on(columns.url, columns._locale),
    _localeParent: uniqueIndex('video_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [video.id],
      name: 'video_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const video_rels = pgTable(
  'video_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    permissionID: integer('permission_id'),
    taxonomyID: integer('taxonomy_id'),
  },
  (columns) => ({
    order: index('video_rels_order_idx').on(columns.order),
    parentIdx: index('video_rels_parent_idx').on(columns.parent),
    pathIdx: index('video_rels_path_idx').on(columns.path),
    video_rels_permission_id_idx: index('video_rels_permission_id_idx').on(columns.permissionID),
    video_rels_taxonomy_id_idx: index('video_rels_taxonomy_id_idx').on(columns.taxonomyID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [video.id],
      name: 'video_rels_parent_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: 'video_rels_permission_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: 'video_rels_taxonomy_fk',
    }).onDelete('cascade'),
  }),
)

export const quote = pgTable(
  'quote',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    quote_updated_at_idx: index('quote_updated_at_idx').on(columns.updatedAt),
    quote_created_at_idx: index('quote_created_at_idx').on(columns.createdAt),
  }),
)

export const quote_locales = pgTable(
  'quote_locales',
  {
    quote: varchar('quote').notNull(),
    context: varchar('context'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('quote_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [quote.id],
      name: 'quote_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const quote_rels = pgTable(
  'quote_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    bookID: integer('book_id'),
    videoID: integer('video_id'),
    article_webID: integer('article_web_id'),
    taxonomyID: integer('taxonomy_id'),
  },
  (columns) => ({
    order: index('quote_rels_order_idx').on(columns.order),
    parentIdx: index('quote_rels_parent_idx').on(columns.parent),
    pathIdx: index('quote_rels_path_idx').on(columns.path),
    quote_rels_book_id_idx: index('quote_rels_book_id_idx').on(columns.bookID),
    quote_rels_video_id_idx: index('quote_rels_video_id_idx').on(columns.videoID),
    quote_rels_article_web_id_idx: index('quote_rels_article_web_id_idx').on(columns.article_webID),
    quote_rels_taxonomy_id_idx: index('quote_rels_taxonomy_id_idx').on(columns.taxonomyID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [quote.id],
      name: 'quote_rels_parent_fk',
    }).onDelete('cascade'),
    bookIdFk: foreignKey({
      columns: [columns['bookID']],
      foreignColumns: [book.id],
      name: 'quote_rels_book_fk',
    }).onDelete('cascade'),
    videoIdFk: foreignKey({
      columns: [columns['videoID']],
      foreignColumns: [video.id],
      name: 'quote_rels_video_fk',
    }).onDelete('cascade'),
    article_webIdFk: foreignKey({
      columns: [columns['article_webID']],
      foreignColumns: [article_web.id],
      name: 'quote_rels_article_web_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: 'quote_rels_taxonomy_fk',
    }).onDelete('cascade'),
  }),
)

export const ui_grid_cards_cards = pgTable(
  'ui_grid_cards_cards',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tailwindClassNames: varchar('tailwind_class_names').notNull(),
  },
  (columns) => ({
    _orderIdx: index('ui_grid_cards_cards_order_idx').on(columns._order),
    _parentIDIdx: index('ui_grid_cards_cards_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ui_grid_cards.id],
      name: 'ui_grid_cards_cards_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const ui_grid_cards = pgTable(
  'ui_grid_cards',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    tailwindGridClassNames: varchar('tailwind_grid_class_names').default(
      'grid-cols-1 md:grid-cols-4',
    ),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    ui_grid_cards_updated_at_idx: index('ui_grid_cards_updated_at_idx').on(columns.updatedAt),
    ui_grid_cards_created_at_idx: index('ui_grid_cards_created_at_idx').on(columns.createdAt),
  }),
)

export const ui_block = pgTable(
  'ui_block',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    ui_block_updated_at_idx: index('ui_block_updated_at_idx').on(columns.updatedAt),
    ui_block_created_at_idx: index('ui_block_created_at_idx').on(columns.createdAt),
  }),
)

export const ui_block_locales = pgTable(
  'ui_block_locales',
  {
    block: jsonb('block').notNull(),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('ui_block_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [ui_block.id],
      name: 'ui_block_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const permission = pgTable(
  'permission',
  {
    id: serial('id').primaryKey(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    title: varchar('title').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    permission_slug_idx: index('permission_slug_idx').on(columns.slug),
    permission_updated_at_idx: index('permission_updated_at_idx').on(columns.updatedAt),
    permission_created_at_idx: index('permission_created_at_idx').on(columns.createdAt),
  }),
)

export const search_results = pgTable(
  'search_results',
  {
    id: serial('id').primaryKey(),
    priority: numeric('priority'),
    tags: varchar('tags'),
    permissions_seeds: varchar('permissions_seeds'),
    href: varchar('href'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_results_updated_at_idx: index('search_results_updated_at_idx').on(columns.updatedAt),
    search_results_created_at_idx: index('search_results_created_at_idx').on(columns.createdAt),
  }),
)

export const search_results_locales = pgTable(
  'search_results_locales',
  {
    title: varchar('title'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('search_results_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search_results.id],
      name: 'search_results_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search_results_rels = pgTable(
  'search_results_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    videoID: integer('video_id'),
    quoteID: integer('quote_id'),
    article_webID: integer('article_web_id'),
    bookID: integer('book_id'),
  },
  (columns) => ({
    order: index('search_results_rels_order_idx').on(columns.order),
    parentIdx: index('search_results_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_results_rels_path_idx').on(columns.path),
    search_results_rels_video_id_idx: index('search_results_rels_video_id_idx').on(columns.videoID),
    search_results_rels_quote_id_idx: index('search_results_rels_quote_id_idx').on(columns.quoteID),
    search_results_rels_article_web_id_idx: index('search_results_rels_article_web_id_idx').on(
      columns.article_webID,
    ),
    search_results_rels_book_id_idx: index('search_results_rels_book_id_idx').on(columns.bookID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search_results.id],
      name: 'search_results_rels_parent_fk',
    }).onDelete('cascade'),
    videoIdFk: foreignKey({
      columns: [columns['videoID']],
      foreignColumns: [video.id],
      name: 'search_results_rels_video_fk',
    }).onDelete('cascade'),
    quoteIdFk: foreignKey({
      columns: [columns['quoteID']],
      foreignColumns: [quote.id],
      name: 'search_results_rels_quote_fk',
    }).onDelete('cascade'),
    article_webIdFk: foreignKey({
      columns: [columns['article_webID']],
      foreignColumns: [article_web.id],
      name: 'search_results_rels_article_web_fk',
    }).onDelete('cascade'),
    bookIdFk: foreignKey({
      columns: [columns['bookID']],
      foreignColumns: [book.id],
      name: 'search_results_rels_book_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: varchar('users_id'),
    pricesID: integer('prices_id'),
    productsID: integer('products_id'),
    mediaID: integer('media_id'),
    taxonomyID: integer('taxonomy_id'),
    pdfID: integer('pdf_id'),
    article_webID: integer('article_web_id'),
    bookID: integer('book_id'),
    videoID: integer('video_id'),
    quoteID: integer('quote_id'),
    ui_grid_cardsID: integer('ui_grid_cards_id'),
    ui_blockID: integer('ui_block_id'),
    permissionID: integer('permission_id'),
    'search-resultsID': integer('search_results_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_prices_id_idx: index(
      'payload_locked_documents_rels_prices_id_idx',
    ).on(columns.pricesID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_taxonomy_id_idx: index(
      'payload_locked_documents_rels_taxonomy_id_idx',
    ).on(columns.taxonomyID),
    payload_locked_documents_rels_pdf_id_idx: index('payload_locked_documents_rels_pdf_id_idx').on(
      columns.pdfID,
    ),
    payload_locked_documents_rels_article_web_id_idx: index(
      'payload_locked_documents_rels_article_web_id_idx',
    ).on(columns.article_webID),
    payload_locked_documents_rels_book_id_idx: index(
      'payload_locked_documents_rels_book_id_idx',
    ).on(columns.bookID),
    payload_locked_documents_rels_video_id_idx: index(
      'payload_locked_documents_rels_video_id_idx',
    ).on(columns.videoID),
    payload_locked_documents_rels_quote_id_idx: index(
      'payload_locked_documents_rels_quote_id_idx',
    ).on(columns.quoteID),
    payload_locked_documents_rels_ui_grid_cards_id_idx: index(
      'payload_locked_documents_rels_ui_grid_cards_id_idx',
    ).on(columns.ui_grid_cardsID),
    payload_locked_documents_rels_ui_block_id_idx: index(
      'payload_locked_documents_rels_ui_block_id_idx',
    ).on(columns.ui_blockID),
    payload_locked_documents_rels_permission_id_idx: index(
      'payload_locked_documents_rels_permission_id_idx',
    ).on(columns.permissionID),
    payload_locked_documents_rels_search_results_id_idx: index(
      'payload_locked_documents_rels_search_results_id_idx',
    ).on(columns['search-resultsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    pricesIdFk: foreignKey({
      columns: [columns['pricesID']],
      foreignColumns: [prices.id],
      name: 'payload_locked_documents_rels_prices_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    taxonomyIdFk: foreignKey({
      columns: [columns['taxonomyID']],
      foreignColumns: [taxonomy.id],
      name: 'payload_locked_documents_rels_taxonomy_fk',
    }).onDelete('cascade'),
    pdfIdFk: foreignKey({
      columns: [columns['pdfID']],
      foreignColumns: [pdf.id],
      name: 'payload_locked_documents_rels_pdf_fk',
    }).onDelete('cascade'),
    article_webIdFk: foreignKey({
      columns: [columns['article_webID']],
      foreignColumns: [article_web.id],
      name: 'payload_locked_documents_rels_article_web_fk',
    }).onDelete('cascade'),
    bookIdFk: foreignKey({
      columns: [columns['bookID']],
      foreignColumns: [book.id],
      name: 'payload_locked_documents_rels_book_fk',
    }).onDelete('cascade'),
    videoIdFk: foreignKey({
      columns: [columns['videoID']],
      foreignColumns: [video.id],
      name: 'payload_locked_documents_rels_video_fk',
    }).onDelete('cascade'),
    quoteIdFk: foreignKey({
      columns: [columns['quoteID']],
      foreignColumns: [quote.id],
      name: 'payload_locked_documents_rels_quote_fk',
    }).onDelete('cascade'),
    ui_grid_cardsIdFk: foreignKey({
      columns: [columns['ui_grid_cardsID']],
      foreignColumns: [ui_grid_cards.id],
      name: 'payload_locked_documents_rels_ui_grid_cards_fk',
    }).onDelete('cascade'),
    ui_blockIdFk: foreignKey({
      columns: [columns['ui_blockID']],
      foreignColumns: [ui_block.id],
      name: 'payload_locked_documents_rels_ui_block_fk',
    }).onDelete('cascade'),
    permissionIdFk: foreignKey({
      columns: [columns['permissionID']],
      foreignColumns: [permission.id],
      name: 'payload_locked_documents_rels_permission_fk',
    }).onDelete('cascade'),
    'search-resultsIdFk': foreignKey({
      columns: [columns['search-resultsID']],
      foreignColumns: [search_results.id],
      name: 'payload_locked_documents_rels_search_results_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: varchar('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const articulos_page = pgTable('articulos_page', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const articulos_page_locales = pgTable(
  'articulos_page_locales',
  {
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('articulos_page_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [articulos_page.id],
      name: 'articulos_page_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const home_page = pgTable('home_page', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const home_page_locales = pgTable(
  'home_page_locales',
  {
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('home_page_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [home_page.id],
      name: 'home_page_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const videos_page = pgTable('videos_page', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const videos_page_locales = pgTable(
  'videos_page_locales',
  {
    content: jsonb('content'),
    id: serial('id').primaryKey(),
    _locale: enum__locales('_locale').notNull(),
    _parentID: integer('_parent_id').notNull(),
  },
  (columns) => ({
    _localeParent: uniqueIndex('videos_page_locales_locale_parent_id_unique').on(
      columns._locale,
      columns._parentID,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [videos_page.id],
      name: 'videos_page_locales_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_users_accounts = relations(users_accounts, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_accounts._parentID],
    references: [users.id],
    relationName: 'accounts',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users = relations(users, ({ many }) => ({
  accounts: many(users_accounts, {
    relationName: 'accounts',
  }),
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
}))
export const relations_prices = relations(prices, () => ({}))
export const relations_products_images = relations(products_images, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_images._parentID],
    references: [products.id],
    relationName: 'images',
  }),
}))
export const relations_products_features = relations(products_features, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_features._parentID],
    references: [products.id],
    relationName: 'features',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  pricesID: one(prices, {
    fields: [products_rels.pricesID],
    references: [prices.id],
    relationName: 'prices',
  }),
  permissionID: one(permission, {
    fields: [products_rels.permissionID],
    references: [permission.id],
    relationName: 'permission',
  }),
}))
export const relations_products = relations(products, ({ many }) => ({
  images: many(products_images, {
    relationName: 'images',
  }),
  features: many(products_features, {
    relationName: 'features',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_taxonomy_breadcrumbs = relations(taxonomy_breadcrumbs, ({ one }) => ({
  _parentID: one(taxonomy, {
    fields: [taxonomy_breadcrumbs._parentID],
    references: [taxonomy.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(taxonomy, {
    fields: [taxonomy_breadcrumbs.doc],
    references: [taxonomy.id],
    relationName: 'doc',
  }),
}))
export const relations_taxonomy_locales = relations(taxonomy_locales, ({ one }) => ({
  _parentID: one(taxonomy, {
    fields: [taxonomy_locales._parentID],
    references: [taxonomy.id],
    relationName: '_locales',
  }),
}))
export const relations_taxonomy = relations(taxonomy, ({ one, many }) => ({
  parent: one(taxonomy, {
    fields: [taxonomy.parent],
    references: [taxonomy.id],
    relationName: 'parent',
  }),
  breadcrumbs: many(taxonomy_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
  _locales: many(taxonomy_locales, {
    relationName: '_locales',
  }),
}))
export const relations_pdf_rels = relations(pdf_rels, ({ one }) => ({
  parent: one(pdf, {
    fields: [pdf_rels.parent],
    references: [pdf.id],
    relationName: '_rels',
  }),
  permissionID: one(permission, {
    fields: [pdf_rels.permissionID],
    references: [permission.id],
    relationName: 'permission',
  }),
}))
export const relations_pdf = relations(pdf, ({ many }) => ({
  _rels: many(pdf_rels, {
    relationName: '_rels',
  }),
}))
export const relations_article_web_locales = relations(article_web_locales, ({ one }) => ({
  _parentID: one(article_web, {
    fields: [article_web_locales._parentID],
    references: [article_web.id],
    relationName: '_locales',
  }),
  document: one(pdf, {
    fields: [article_web_locales.document],
    references: [pdf.id],
    relationName: 'document',
  }),
}))
export const relations_article_web_rels = relations(article_web_rels, ({ one }) => ({
  parent: one(article_web, {
    fields: [article_web_rels.parent],
    references: [article_web.id],
    relationName: '_rels',
  }),
  permissionID: one(permission, {
    fields: [article_web_rels.permissionID],
    references: [permission.id],
    relationName: 'permission',
  }),
  taxonomyID: one(taxonomy, {
    fields: [article_web_rels.taxonomyID],
    references: [taxonomy.id],
    relationName: 'taxonomy',
  }),
}))
export const relations_article_web = relations(article_web, ({ one, many }) => ({
  cover: one(media, {
    fields: [article_web.cover],
    references: [media.id],
    relationName: 'cover',
  }),
  _locales: many(article_web_locales, {
    relationName: '_locales',
  }),
  _rels: many(article_web_rels, {
    relationName: '_rels',
  }),
}))
export const relations__article_web_v_locales = relations(_article_web_v_locales, ({ one }) => ({
  _parentID: one(_article_web_v, {
    fields: [_article_web_v_locales._parentID],
    references: [_article_web_v.id],
    relationName: '_locales',
  }),
  version_document: one(pdf, {
    fields: [_article_web_v_locales.version_document],
    references: [pdf.id],
    relationName: 'version_document',
  }),
}))
export const relations__article_web_v_rels = relations(_article_web_v_rels, ({ one }) => ({
  parent: one(_article_web_v, {
    fields: [_article_web_v_rels.parent],
    references: [_article_web_v.id],
    relationName: '_rels',
  }),
  permissionID: one(permission, {
    fields: [_article_web_v_rels.permissionID],
    references: [permission.id],
    relationName: 'permission',
  }),
  taxonomyID: one(taxonomy, {
    fields: [_article_web_v_rels.taxonomyID],
    references: [taxonomy.id],
    relationName: 'taxonomy',
  }),
}))
export const relations__article_web_v = relations(_article_web_v, ({ one, many }) => ({
  parent: one(article_web, {
    fields: [_article_web_v.parent],
    references: [article_web.id],
    relationName: 'parent',
  }),
  version_cover: one(media, {
    fields: [_article_web_v.version_cover],
    references: [media.id],
    relationName: 'version_cover',
  }),
  _locales: many(_article_web_v_locales, {
    relationName: '_locales',
  }),
  _rels: many(_article_web_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_book_ediciones = relations(book_ediciones, ({ one }) => ({
  _parentID: one(book, {
    fields: [book_ediciones._parentID],
    references: [book.id],
    relationName: 'Ediciones',
  }),
}))
export const relations_book_locales = relations(book_locales, ({ one }) => ({
  _parentID: one(book, {
    fields: [book_locales._parentID],
    references: [book.id],
    relationName: '_locales',
  }),
}))
export const relations_book_rels = relations(book_rels, ({ one }) => ({
  parent: one(book, {
    fields: [book_rels.parent],
    references: [book.id],
    relationName: '_rels',
  }),
  taxonomyID: one(taxonomy, {
    fields: [book_rels.taxonomyID],
    references: [taxonomy.id],
    relationName: 'taxonomy',
  }),
}))
export const relations_book = relations(book, ({ one, many }) => ({
  cover: one(media, {
    fields: [book.cover],
    references: [media.id],
    relationName: 'cover',
  }),
  Ediciones: many(book_ediciones, {
    relationName: 'Ediciones',
  }),
  _locales: many(book_locales, {
    relationName: '_locales',
  }),
  _rels: many(book_rels, {
    relationName: '_rels',
  }),
}))
export const relations_video_locales = relations(video_locales, ({ one }) => ({
  _parentID: one(video, {
    fields: [video_locales._parentID],
    references: [video.id],
    relationName: '_locales',
  }),
}))
export const relations_video_rels = relations(video_rels, ({ one }) => ({
  parent: one(video, {
    fields: [video_rels.parent],
    references: [video.id],
    relationName: '_rels',
  }),
  permissionID: one(permission, {
    fields: [video_rels.permissionID],
    references: [permission.id],
    relationName: 'permission',
  }),
  taxonomyID: one(taxonomy, {
    fields: [video_rels.taxonomyID],
    references: [taxonomy.id],
    relationName: 'taxonomy',
  }),
}))
export const relations_video = relations(video, ({ many }) => ({
  _locales: many(video_locales, {
    relationName: '_locales',
  }),
  _rels: many(video_rels, {
    relationName: '_rels',
  }),
}))
export const relations_quote_locales = relations(quote_locales, ({ one }) => ({
  _parentID: one(quote, {
    fields: [quote_locales._parentID],
    references: [quote.id],
    relationName: '_locales',
  }),
}))
export const relations_quote_rels = relations(quote_rels, ({ one }) => ({
  parent: one(quote, {
    fields: [quote_rels.parent],
    references: [quote.id],
    relationName: '_rels',
  }),
  bookID: one(book, {
    fields: [quote_rels.bookID],
    references: [book.id],
    relationName: 'book',
  }),
  videoID: one(video, {
    fields: [quote_rels.videoID],
    references: [video.id],
    relationName: 'video',
  }),
  article_webID: one(article_web, {
    fields: [quote_rels.article_webID],
    references: [article_web.id],
    relationName: 'article_web',
  }),
  taxonomyID: one(taxonomy, {
    fields: [quote_rels.taxonomyID],
    references: [taxonomy.id],
    relationName: 'taxonomy',
  }),
}))
export const relations_quote = relations(quote, ({ many }) => ({
  _locales: many(quote_locales, {
    relationName: '_locales',
  }),
  _rels: many(quote_rels, {
    relationName: '_rels',
  }),
}))
export const relations_ui_grid_cards_cards = relations(ui_grid_cards_cards, ({ one }) => ({
  _parentID: one(ui_grid_cards, {
    fields: [ui_grid_cards_cards._parentID],
    references: [ui_grid_cards.id],
    relationName: 'cards',
  }),
}))
export const relations_ui_grid_cards = relations(ui_grid_cards, ({ many }) => ({
  cards: many(ui_grid_cards_cards, {
    relationName: 'cards',
  }),
}))
export const relations_ui_block_locales = relations(ui_block_locales, ({ one }) => ({
  _parentID: one(ui_block, {
    fields: [ui_block_locales._parentID],
    references: [ui_block.id],
    relationName: '_locales',
  }),
}))
export const relations_ui_block = relations(ui_block, ({ many }) => ({
  _locales: many(ui_block_locales, {
    relationName: '_locales',
  }),
}))
export const relations_permission = relations(permission, () => ({}))
export const relations_search_results_locales = relations(search_results_locales, ({ one }) => ({
  _parentID: one(search_results, {
    fields: [search_results_locales._parentID],
    references: [search_results.id],
    relationName: '_locales',
  }),
}))
export const relations_search_results_rels = relations(search_results_rels, ({ one }) => ({
  parent: one(search_results, {
    fields: [search_results_rels.parent],
    references: [search_results.id],
    relationName: '_rels',
  }),
  videoID: one(video, {
    fields: [search_results_rels.videoID],
    references: [video.id],
    relationName: 'video',
  }),
  quoteID: one(quote, {
    fields: [search_results_rels.quoteID],
    references: [quote.id],
    relationName: 'quote',
  }),
  article_webID: one(article_web, {
    fields: [search_results_rels.article_webID],
    references: [article_web.id],
    relationName: 'article_web',
  }),
  bookID: one(book, {
    fields: [search_results_rels.bookID],
    references: [book.id],
    relationName: 'book',
  }),
}))
export const relations_search_results = relations(search_results, ({ many }) => ({
  _locales: many(search_results_locales, {
    relationName: '_locales',
  }),
  _rels: many(search_results_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    pricesID: one(prices, {
      fields: [payload_locked_documents_rels.pricesID],
      references: [prices.id],
      relationName: 'prices',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    taxonomyID: one(taxonomy, {
      fields: [payload_locked_documents_rels.taxonomyID],
      references: [taxonomy.id],
      relationName: 'taxonomy',
    }),
    pdfID: one(pdf, {
      fields: [payload_locked_documents_rels.pdfID],
      references: [pdf.id],
      relationName: 'pdf',
    }),
    article_webID: one(article_web, {
      fields: [payload_locked_documents_rels.article_webID],
      references: [article_web.id],
      relationName: 'article_web',
    }),
    bookID: one(book, {
      fields: [payload_locked_documents_rels.bookID],
      references: [book.id],
      relationName: 'book',
    }),
    videoID: one(video, {
      fields: [payload_locked_documents_rels.videoID],
      references: [video.id],
      relationName: 'video',
    }),
    quoteID: one(quote, {
      fields: [payload_locked_documents_rels.quoteID],
      references: [quote.id],
      relationName: 'quote',
    }),
    ui_grid_cardsID: one(ui_grid_cards, {
      fields: [payload_locked_documents_rels.ui_grid_cardsID],
      references: [ui_grid_cards.id],
      relationName: 'ui_grid_cards',
    }),
    ui_blockID: one(ui_block, {
      fields: [payload_locked_documents_rels.ui_blockID],
      references: [ui_block.id],
      relationName: 'ui_block',
    }),
    permissionID: one(permission, {
      fields: [payload_locked_documents_rels.permissionID],
      references: [permission.id],
      relationName: 'permission',
    }),
    'search-resultsID': one(search_results, {
      fields: [payload_locked_documents_rels['search-resultsID']],
      references: [search_results.id],
      relationName: 'search-results',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_articulos_page_locales = relations(articulos_page_locales, ({ one }) => ({
  _parentID: one(articulos_page, {
    fields: [articulos_page_locales._parentID],
    references: [articulos_page.id],
    relationName: '_locales',
  }),
}))
export const relations_articulos_page = relations(articulos_page, ({ many }) => ({
  _locales: many(articulos_page_locales, {
    relationName: '_locales',
  }),
}))
export const relations_home_page_locales = relations(home_page_locales, ({ one }) => ({
  _parentID: one(home_page, {
    fields: [home_page_locales._parentID],
    references: [home_page.id],
    relationName: '_locales',
  }),
}))
export const relations_home_page = relations(home_page, ({ many }) => ({
  _locales: many(home_page_locales, {
    relationName: '_locales',
  }),
}))
export const relations_videos_page_locales = relations(videos_page_locales, ({ one }) => ({
  _parentID: one(videos_page, {
    fields: [videos_page_locales._parentID],
    references: [videos_page.id],
    relationName: '_locales',
  }),
}))
export const relations_videos_page = relations(videos_page, ({ many }) => ({
  _locales: many(videos_page_locales, {
    relationName: '_locales',
  }),
}))

type DatabaseSchema = {
  enum__locales: typeof enum__locales
  enum_prices_type: typeof enum_prices_type
  enum_prices_interval: typeof enum_prices_interval
  enum_products_type: typeof enum_products_type
  enum_article_web_status: typeof enum_article_web_status
  enum__article_web_v_version_status: typeof enum__article_web_v_version_status
  enum__article_web_v_published_locale: typeof enum__article_web_v_published_locale
  enum_book_ediciones_variant: typeof enum_book_ediciones_variant
  enum_book_ediciones_language: typeof enum_book_ediciones_language
  users_accounts: typeof users_accounts
  users_sessions: typeof users_sessions
  users: typeof users
  prices: typeof prices
  products_images: typeof products_images
  products_features: typeof products_features
  products: typeof products
  products_rels: typeof products_rels
  media: typeof media
  taxonomy_breadcrumbs: typeof taxonomy_breadcrumbs
  taxonomy: typeof taxonomy
  taxonomy_locales: typeof taxonomy_locales
  pdf: typeof pdf
  pdf_rels: typeof pdf_rels
  article_web: typeof article_web
  article_web_locales: typeof article_web_locales
  article_web_rels: typeof article_web_rels
  _article_web_v: typeof _article_web_v
  _article_web_v_locales: typeof _article_web_v_locales
  _article_web_v_rels: typeof _article_web_v_rels
  book_ediciones: typeof book_ediciones
  book: typeof book
  book_locales: typeof book_locales
  book_rels: typeof book_rels
  video: typeof video
  video_locales: typeof video_locales
  video_rels: typeof video_rels
  quote: typeof quote
  quote_locales: typeof quote_locales
  quote_rels: typeof quote_rels
  ui_grid_cards_cards: typeof ui_grid_cards_cards
  ui_grid_cards: typeof ui_grid_cards
  ui_block: typeof ui_block
  ui_block_locales: typeof ui_block_locales
  permission: typeof permission
  search_results: typeof search_results
  search_results_locales: typeof search_results_locales
  search_results_rels: typeof search_results_rels
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  articulos_page: typeof articulos_page
  articulos_page_locales: typeof articulos_page_locales
  home_page: typeof home_page
  home_page_locales: typeof home_page_locales
  videos_page: typeof videos_page
  videos_page_locales: typeof videos_page_locales
  relations_users_accounts: typeof relations_users_accounts
  relations_users_sessions: typeof relations_users_sessions
  relations_users: typeof relations_users
  relations_prices: typeof relations_prices
  relations_products_images: typeof relations_products_images
  relations_products_features: typeof relations_products_features
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations_media: typeof relations_media
  relations_taxonomy_breadcrumbs: typeof relations_taxonomy_breadcrumbs
  relations_taxonomy_locales: typeof relations_taxonomy_locales
  relations_taxonomy: typeof relations_taxonomy
  relations_pdf_rels: typeof relations_pdf_rels
  relations_pdf: typeof relations_pdf
  relations_article_web_locales: typeof relations_article_web_locales
  relations_article_web_rels: typeof relations_article_web_rels
  relations_article_web: typeof relations_article_web
  relations__article_web_v_locales: typeof relations__article_web_v_locales
  relations__article_web_v_rels: typeof relations__article_web_v_rels
  relations__article_web_v: typeof relations__article_web_v
  relations_book_ediciones: typeof relations_book_ediciones
  relations_book_locales: typeof relations_book_locales
  relations_book_rels: typeof relations_book_rels
  relations_book: typeof relations_book
  relations_video_locales: typeof relations_video_locales
  relations_video_rels: typeof relations_video_rels
  relations_video: typeof relations_video
  relations_quote_locales: typeof relations_quote_locales
  relations_quote_rels: typeof relations_quote_rels
  relations_quote: typeof relations_quote
  relations_ui_grid_cards_cards: typeof relations_ui_grid_cards_cards
  relations_ui_grid_cards: typeof relations_ui_grid_cards
  relations_ui_block_locales: typeof relations_ui_block_locales
  relations_ui_block: typeof relations_ui_block
  relations_permission: typeof relations_permission
  relations_search_results_locales: typeof relations_search_results_locales
  relations_search_results_rels: typeof relations_search_results_rels
  relations_search_results: typeof relations_search_results
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_articulos_page_locales: typeof relations_articulos_page_locales
  relations_articulos_page: typeof relations_articulos_page
  relations_home_page_locales: typeof relations_home_page_locales
  relations_home_page: typeof relations_home_page
  relations_videos_page_locales: typeof relations_videos_page_locales
  relations_videos_page: typeof relations_videos_page
}

declare module '@payloadcms/db-postgres/types' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
